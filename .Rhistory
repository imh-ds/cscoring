i = 1
data = grit
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Get names of indicators
indicators <- varlist[[i]]
indicators
# Write linear model formula
lm_formula <- as.formula(paste(names(varlist)[i], "~",
paste(indicators, collapse = " + ")))
# Calculate correlation weighted composite score and save to dataframe
df[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# Calculate regression weights
lm_model <- lm(lm_formula,
data = df)
# Get regression weights
# NOTE: Getting standardized beta coefficients to avoid issues with different scales
reg_weights <- coef(lm.beta::lm.beta(lm_model))[setdiff(names(coef(lm_model)), "(Intercept)")]
reg_weights
data.frame(weights = reg_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, weights)
data.frame(weights = reg_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Normalize weights
dplyr::mutate(weights = weights / sum(weights)) %>%
# Reorder
dplyr::select(composite, indicator, weights)
data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Normalize loadings
dplyr::mutate(loadings = loadings / sum(loadings)) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
#'                 agreeableness = sprintf("a%01d", seq(10)),
#'                 conscientiousness = sprintf("c%01d", seq(10)),
#'                 openness = sprintf("o%01d", seq(10)),
#'                 grit = sprintf("gs%01d", seq(12)))
#'
#' # Calculate correlation-weighted composite scores & metrics
#' correlation_data <- correlation_score_summary(data = grit,
#'                                               varlist = varlist)
#'
#' @export
regression_loadings <- function(data = .,
varlist){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# Create empty list to score composite loadings
composite_loadings <- list()
for(i in seq_along(varlist)){
# -- DATA PREPARATION -- #
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# -- COMPOSITE WEIGHTS CALCULATION -- #
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Get names of indicators
indicators <- varlist[[i]]
# Write linear model formula
lm_formula <- as.formula(paste(names(varlist)[i], "~",
paste(indicators, collapse = " + ")))
# Calculate correlation weighted composite score and save to dataframe
df[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# Calculate regression weights
lm_model <- lm(lm_formula,
data = df)
# Get regression weights
# NOTE: Getting standardized beta coefficients to avoid issues with different scales
reg_weights <- coef(lm.beta::lm.beta(lm_model))[setdiff(names(coef(lm_model)), "(Intercept)")]
# -- COMPOSITE CALCULATION -- #
# Calculate regression weighted composite score
data[[names(varlist)[i]]] <- rowMeans(df[, -ncol(df)] * reg_weights,
na.rm = T)
# -- LOADINGS CALCULATION -- #
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
}
# Convert the loadings list to a dataframe
loadings_table <- purrr::map_df(composite_loadings, ~.x)
# Return
return(loadings_table)
}
#'                 agreeableness = sprintf("a%01d", seq(10)),
#'                 conscientiousness = sprintf("c%01d", seq(10)),
#'                 openness = sprintf("o%01d", seq(10)),
#'                 grit = sprintf("gs%01d", seq(12)))
#'
#' # Calculate correlation-weighted composite scores & metrics
#' correlation_data <- correlation_score_summary(data = grit,
#'                                               varlist = varlist)
#'
#' @export
regression_weights <- function(data = .,
varlist){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# Create empty list to save composite weights
composite_weights <- list()
for(i in seq_along(varlist)){
# -- DATA PREPARATION -- #
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# -- COMPOSITE WEIGHTS CALCULATION -- #
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Get names of indicators
indicators <- varlist[[i]]
# Write linear model formula
lm_formula <- as.formula(paste(names(varlist)[i], "~",
paste(indicators, collapse = " + ")))
# Calculate correlation weighted composite score and save to dataframe
df[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# Calculate regression weights
lm_model <- lm(lm_formula,
data = df)
# Get regression weights
# NOTE: Getting standardized beta coefficients to avoid issues with different scales
reg_weights <- coef(lm.beta::lm.beta(lm_model))[setdiff(names(coef(lm_model)), "(Intercept)")]
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(weights = reg_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Normalize weights
dplyr::mutate(weights = weights / sum(weights)) %>%
# Reorder
dplyr::select(composite, indicator, weights)
}
# Convert the weights list to a dataframe
weights_table <- purrr::map_df(composite_weights, ~.x)
# Return
return(weights_table)
}
#'                 agreeableness = sprintf("a%01d", seq(10)),
#'                 conscientiousness = sprintf("c%01d", seq(10)),
#'                 openness = sprintf("o%01d", seq(10)),
#'                 grit = sprintf("gs%01d", seq(12)))
#'
#' # Calculate correlation-weighted composite scores & metrics
#' correlation_data <- correlation_score_summary(data = grit,
#'                                               varlist = varlist)
#'
#' @export
regression_score <- function(data = .,
varlist){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
for(i in seq_along(varlist)){
# -- DATA PREPARATION -- #
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# -- COMPOSITE WEIGHTS CALCULATION -- #
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Get names of indicators
indicators <- varlist[[i]]
# Write linear model formula
lm_formula <- as.formula(paste(names(varlist)[i], "~",
paste(indicators, collapse = " + ")))
# Calculate correlation weighted composite score and save to dataframe
df[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# Calculate regression weights
lm_model <- lm(lm_formula,
data = df)
# Get regression weights
# NOTE: Getting standardized beta coefficients to avoid issues with different scales
reg_weights <- coef(lm.beta::lm.beta(lm_model))[setdiff(names(coef(lm_model)), "(Intercept)")]
# -- COMPOSITE CALCULATION -- #
# Calculate regression weighted composite score
data[[names(varlist)[i]]] <- rowMeans(df[, -ncol(df)] * reg_weights,
na.rm = T)
}
# Return
return(data)
}
regression_metrics(grit, varlist)
data.frame(indicator = varlist[[i]],
weights = 1)
data.frame(indicator = varlist[[i]],
weights = 1) %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Normalize weights
dplyr::mutate(weights = weights / sum(weights)) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate unweighted average composite score
data[[names(varlist)[i]]] <- rowMeans(x = dplyr::select(df,
varlist[[i]]),
na.rm = T)
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(indicator = varlist[[i]],
weights = 1) %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Normalize weights
dplyr::mutate(weights = weights / sum(weights)) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
loadings
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
composite_weights
composite_loadings
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
for(i in seq_along(varlist)){
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate unweighted average composite score
data[[names(varlist)[i]]] <- rowMeans(x = dplyr::select(df,
varlist[[i]]),
na.rm = T)
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(indicator = varlist[[i]],
weights = 1) %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Normalize weights
dplyr::mutate(weights = weights / sum(weights)) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# -- LOADINGS CALCULATION -- #
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
}
# Convert the weights list to a dataframe
weights_table <- purrr::map_df(composite_weights, ~.x)
# Convert the loadings list to a dataframe
loadings_table <- purrr::map_df(composite_loadings, ~.x)
weights_table
# Merge loadings and weights together
metrics_table <- dplyr::inner_join(weights_table,
loadings_table,
by = c("composite", "indicator"))
# Create returnable list
return_results <- list(data = data,
metrics = metrics_table)
#' regression_data <- composite_score(data = grit,
#'                                    varlist = varlist,
#'                                    weight = "regression")
#'
#' # Calculate unweighted average composite scores
#' average_data <- composite_score(data = grit,
#'                                 varlist = varlist,
#'                                 weight = "average")
#'
#' @export
composite_score <- function(data = .,
varlist,
weight = "correlation"){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# ------------------------------------------------ #
# -- If unweighted, get average composite score -- #
# ------------------------------------------------ #
if(weight == "average"){
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
for(i in seq_along(varlist)){
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate unweighted average composite score
data[[names(varlist)[i]]] <- rowMeans(x = dplyr::select(df,
varlist[[i]]),
na.rm = T)
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(indicator = varlist[[i]],
weights = 1) %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Normalize weights
dplyr::mutate(weights = weights / sum(weights)) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# -- LOADINGS CALCULATION -- #
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
}
# Convert the weights list to a dataframe
weights_table <- purrr::map_df(composite_weights, ~.x)
# Convert the loadings list to a dataframe
loadings_table <- purrr::map_df(composite_loadings, ~.x)
# Merge loadings and weights together
metrics_table <- dplyr::inner_join(weights_table,
loadings_table,
by = c("composite", "indicator"))
# Create returnable list
return_results <- list(data = data,
metrics = metrics_table)
# Return
return(return_results)
}
# -------------------------------------------------- #
# -- If correlation weights, save composite score -- #
# -------------------------------------------------- #
if(weight == "correlation"){
return_results <- correlation_score_summary(data,
varlist)
}
# ----------------------------------------------------------------------- #
# -- If regression weights, run linear model to get regression weights -- #
# ----------------------------------------------------------------------- #
if(weight == "regression"){
return_results <- regression_score_summary(data,
varlist)
}
# Return
return(return_results)
}
#' regression_data <- composite_score(data = grit,
#'                                    varlist = varlist,
#'                                    weight = "regression")
#'
#' # Calculate unweighted average composite scores
#' average_data <- composite_score(data = grit,
#'                                 varlist = varlist,
#'                                 weight = "average")
#'
#' @export
composite_score_summary <- function(data = .,
varlist,
weight = "correlation"){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# ------------------------------------------------ #
# -- If unweighted, get average composite score -- #
# ------------------------------------------------ #
if(weight == "average"){
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
for(i in seq_along(varlist)){
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate unweighted average composite score
data[[names(varlist)[i]]] <- rowMeans(x = dplyr::select(df,
varlist[[i]]),
na.rm = T)
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(indicator = varlist[[i]],
weights = 1) %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Normalize weights
dplyr::mutate(weights = weights / sum(weights)) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# -- LOADINGS CALCULATION -- #
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
}
# Convert the weights list to a dataframe
weights_table <- purrr::map_df(composite_weights, ~.x)
# Convert the loadings list to a dataframe
loadings_table <- purrr::map_df(composite_loadings, ~.x)
# Merge loadings and weights together
metrics_table <- dplyr::inner_join(weights_table,
loadings_table,
by = c("composite", "indicator"))
# Create returnable list
return_results <- list(data = data,
metrics = metrics_table)
# Return
return(return_results)
}
# -------------------------------------------------- #
# -- If correlation weights, save composite score -- #
# -------------------------------------------------- #
if(weight == "correlation"){
return_results <- correlation_score_summary(data,
varlist)
}
# ----------------------------------------------------------------------- #
# -- If regression weights, run linear model to get regression weights -- #
# ----------------------------------------------------------------------- #
if(weight == "regression"){
return_results <- regression_score_summary(data,
varlist)
}
# Return
return(return_results)
}
composite_score_summary(grit, varlist)
library(roxygen2)
roxygenise()
roxygenise()
