#'                 grit = sprintf("gs%01d", seq(12)))
#'
#' # Calculate correlation-weighted composite scores & metrics
#' correlation_data <- correlation_score_summary(data = grit,
#'                                               varlist = varlist)
#'
#' @export
correlation_score_summary <- function(data = .,
varlist){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
for(i in seq_along(varlist)){
# -- DATA PREPARATION -- #
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# -- COMPOSITE WEIGHTS CALCULATION -- #
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(weights = cor_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# -- COMPOSITE CALCULATION -- #
# Calculate unweighted correlation composite score
data <- data %>%
dplyr::mutate(!!rlang::sym(names(varlist)[i]) := rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T))
# -- LOADINGS CALCULATION -- #
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
}
# Convert the weights list to a dataframe
weights_table <- purrr::map_df(composite_weights, ~.x)
# Convert the loadings list to a dataframe
loadings_table <- purrr::map_df(composite_loadings, ~.x)
# Merge loadings and weights together
metrics_table <- dplyr::inner_join(weights_table,
loadings_table,
by = c("composite", "indicator"))
# Create returnable list
return_results <- list(data = data,
metrics = metrics_table)
# Return
return(return_results)
}
correlation_score_summary(grit, varlist)
?sweep
?rowMeans
#'                 conscientiousness = sprintf("c%01d", seq(10)),
#'                 openness = sprintf("o%01d", seq(10)),
#'                 grit = sprintf("gs%01d", seq(12)))
#'
#' # Calculate correlation-weighted composite scores
#' correlation_data <- composite_score(data = grit,
#'                                     varlist = varlist,
#'                                     weight = "correlation")
#'
#' @export
correlation_score <- function(data = .,
varlist){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
for(i in seq_along(varlist)){
# -- DATA PREPARATION -- #
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# -- COMPOSITE WEIGHTS CALCULATION -- #
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# -- COMPOSITE CALCULATION -- #
# Calculate unweighted correlation composite score
data <- data %>%
dplyr::mutate(!!dplyr::sym(names(varlist)[i]) := rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T))
}
# Return
return(data)
}
test <- grit %>% correlation_score(varlist)
test <- correlation_score(grit, varlist)
test
test <- correlation_score_summary(grit, varlist)
test$data
test$metrics
data(grit)
data = grit
varlist <- list(extraversion = sprintf("e%01d", seq(10)),
neuroticism = sprintf("n%01d", seq(10)),
agreeableness = sprintf("a%01d", seq(10)),
conscientiousness = sprintf("c%01d", seq(10)),
openness = sprintf("o%01d", seq(10)),
grit = sprintf("gs%01d", seq(12)))
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
i = 1
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
cor_matrix
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Get names of indicators
indicators <- varlist[[i]]
# Write linear model formula
lm_formula <- as.formula(paste(names(varlist)[i], "~",
paste(indicators, collapse = " + ")))
# Standardize variables in dataframe to align correlation coefficient with
# standardized beta coefficient
df <- df %>%
dplyr::mutate(dplyr::across(everything(),
~ scale(.)))
# Calculate correlation weighted composite score and save to dataframe
df[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# Calculate regression weights
lm_model <- lm(lm_formula,
data = df)
lm_model
# Save regression weights
reg_weights <- coef(lm_model)[setdiff(names(coef(lm_model)), "(Intercept)")]
reg_weights
data.frame(weights = reg_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, weights)
lm_model
coef(lm_model)
lm.beta::lm.beta(lm_model)
coef(lm.beta::lm.beta(lm_model))
# Save regression weights
reg_weights <- coef(lm.beta::lm.beta(lm_model))[setdiff(names(coef(lm_model)), "(Intercept)")]
data.frame(weights = reg_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Get names of indicators
indicators <- varlist[[i]]
# Write linear model formula
lm_formula <- as.formula(paste(names(varlist)[i], "~",
paste(indicators, collapse = " + ")))
# Calculate correlation weighted composite score and save to dataframe
df[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# Calculate regression weights
lm_model <- lm(lm_formula,
data = df)
# Save regression weights
reg_weights <- coef(lm.beta::lm.beta(lm_model))[setdiff(names(coef(lm_model)), "(Intercept)")]
reg_weights
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(weights = reg_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# Calculate regression weighted composite score
data[[names(varlist)[i]]] <- rowMeans(df[, -ncol(df)] * reg_weights,
na.rm = T)
data$extraversion
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
loadings
names(varlist)[i]
dplyr::all_of(varlist[[i]])
varlist[[i]]
cor(df_loadings,
use = "complete.obs")
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
loadings
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
composite_loadings
df <- slice(df, 1:(n() - 10))
df <- dplyr::slice(df, 1:(n() - 10))
?n
df <- dplyr::slice(df, 1:(dplyr::n() - 10))
data[[names(varlist)[i]]] <- rowMeans(df[, -ncol(df)] * reg_weights,
na.rm = T)
#'                 agreeableness = sprintf("a%01d", seq(10)),
#'                 conscientiousness = sprintf("c%01d", seq(10)),
#'                 openness = sprintf("o%01d", seq(10)),
#'                 grit = sprintf("gs%01d", seq(12)))
#'
#' # Calculate correlation-weighted composite scores & metrics
#' correlation_data <- correlation_score_summary(data = grit,
#'                                               varlist = varlist)
#'
#' @export
correlation_score_summary <- function(data = .,
varlist){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
for(i in seq_along(varlist)){
# -- DATA PREPARATION -- #
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# -- COMPOSITE WEIGHTS CALCULATION -- #
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Get names of indicators
indicators <- varlist[[i]]
# Write linear model formula
lm_formula <- as.formula(paste(names(varlist)[i], "~",
paste(indicators, collapse = " + ")))
# Calculate correlation weighted composite score and save to dataframe
df[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# Calculate regression weights
lm_model <- lm(lm_formula,
data = df)
# Get regression weights
# NOTE: Getting standardized beta coefficients to avoid issues with different scales
reg_weights <- coef(lm.beta::lm.beta(lm_model))[setdiff(names(coef(lm_model)), "(Intercept)")]
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(weights = reg_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# -- COMPOSITE CALCULATION -- #
# Calculate regression weighted composite score
data[[names(varlist)[i]]] <- rowMeans(df[, -ncol(df)] * reg_weights,
na.rm = T)
# -- LOADINGS CALCULATION -- #
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
}
# Convert the weights list to a dataframe
weights_table <- purrr::map_df(composite_weights, ~.x)
# Convert the loadings list to a dataframe
loadings_table <- purrr::map_df(composite_loadings, ~.x)
# Merge loadings and weights together
metrics_table <- dplyr::inner_join(weights_table,
loadings_table,
by = c("composite", "indicator"))
# Create returnable list
return_results <- list(data = data,
metrics = metrics_table)
# Return
return(return_results)
}
#'                 agreeableness = sprintf("a%01d", seq(10)),
#'                 conscientiousness = sprintf("c%01d", seq(10)),
#'                 openness = sprintf("o%01d", seq(10)),
#'                 grit = sprintf("gs%01d", seq(12)))
#'
#' # Calculate correlation-weighted composite scores & metrics
#' correlation_data <- correlation_score_summary(data = grit,
#'                                               varlist = varlist)
#'
#' @export
regression_score_summary <- function(data = .,
varlist){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
for(i in seq_along(varlist)){
# -- DATA PREPARATION -- #
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# -- COMPOSITE WEIGHTS CALCULATION -- #
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Get names of indicators
indicators <- varlist[[i]]
# Write linear model formula
lm_formula <- as.formula(paste(names(varlist)[i], "~",
paste(indicators, collapse = " + ")))
# Calculate correlation weighted composite score and save to dataframe
df[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# Calculate regression weights
lm_model <- lm(lm_formula,
data = df)
# Get regression weights
# NOTE: Getting standardized beta coefficients to avoid issues with different scales
reg_weights <- coef(lm.beta::lm.beta(lm_model))[setdiff(names(coef(lm_model)), "(Intercept)")]
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(weights = reg_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# -- COMPOSITE CALCULATION -- #
# Calculate regression weighted composite score
data[[names(varlist)[i]]] <- rowMeans(df[, -ncol(df)] * reg_weights,
na.rm = T)
# -- LOADINGS CALCULATION -- #
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
}
# Convert the weights list to a dataframe
weights_table <- purrr::map_df(composite_weights, ~.x)
# Convert the loadings list to a dataframe
loadings_table <- purrr::map_df(composite_loadings, ~.x)
# Merge loadings and weights together
metrics_table <- dplyr::inner_join(weights_table,
loadings_table,
by = c("composite", "indicator"))
# Create returnable list
return_results <- list(data = data,
metrics = metrics_table)
# Return
return(return_results)
}
regression_score_summary(grit, varlist)
regression_score_summary(grit, varlist)$metric
regression_score_summary(grit, varlist)$metric$weights
#'                 agreeableness = sprintf("a%01d", seq(10)),
#'                 conscientiousness = sprintf("c%01d", seq(10)),
#'                 openness = sprintf("o%01d", seq(10)),
#'                 grit = sprintf("gs%01d", seq(12)))
#'
#' # Calculate correlation-weighted composite scores & metrics
#' correlation_data <- correlation_score_summary(data = grit,
#'                                               varlist = varlist)
#'
#' @export
correlation_score_summary <- function(data = .,
varlist){
# Call pipe function from `magrittr`
`%>%` <- magrittr::`%>%`
# Create empty list to save composite weights
composite_weights <- list()
# Create empty list to score composite loadings
composite_loadings <- list()
for(i in seq_along(varlist)){
# -- DATA PREPARATION -- #
# Get dataframe with just indicator vars
df <- data %>%
dplyr::select(dplyr::all_of(varlist[[i]]))
# Calculate correlation matrix
cor_matrix <- stats::cor(df,
use = 'complete.obs')
# -- COMPOSITE WEIGHTS CALCULATION -- #
# Get the correlation weights
cor_weights <- colMeans(cor_matrix)
# Save weights
composite_weights[[names(varlist)[i]]] <- data.frame(weights = cor_weights) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, weights)
# -- COMPOSITE CALCULATION -- #
# Calculate unweighted correlation composite score
data[[names(varlist)[i]]] <- rowMeans(sweep(df,
2,
cor_weights,
"*"),
na.rm = T)
# -- LOADINGS CALCULATION -- #
# Get loadings as the correlation between indicator and composite
df_loadings <- data %>%
dplyr::select(names(varlist)[i],
dplyr::all_of(varlist[[i]]))
loadings <- cor(df_loadings,
use = "complete.obs")[,1][-1]
# Get loadings
composite_loadings[[names(varlist)[i]]] <- data.frame(loadings = loadings) %>%
# Convert rownames to indicator column
tibble::rownames_to_column(var = "indicator") %>%
# Create column to inform which composite the indicators reflect
dplyr::mutate(composite = names(varlist)[i]) %>%
# Reorder
dplyr::select(composite, indicator, loadings)
}
# Convert the weights list to a dataframe
weights_table <- purrr::map_df(composite_weights, ~.x)
# Convert the loadings list to a dataframe
loadings_table <- purrr::map_df(composite_loadings, ~.x)
# Merge loadings and weights together
metrics_table <- dplyr::inner_join(weights_table,
loadings_table,
by = c("composite", "indicator"))
# Create returnable list
return_results <- list(data = data,
metrics = metrics_table)
# Return
return(return_results)
}
correlation_score_summary(grit, varlist)
regression_score_summary(grit, varlist)
correlation_score_summary(grit, varlist)
regression_score_summary(grit, varlist)
correlation_score_summary(grit, varlist)
regression_score_summary(grit, varlist)
correlation_score_summary(grit, varlist)
